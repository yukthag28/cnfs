import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
class Account {
    private int accountNumber;
    private String accountHolder;
    private double balance;

    public Account(int accountNumber, String accountHolder, double initialBalance) {
        this.accountNumber = accountNumber;
        this.accountHolder = accountHolder;
        this.balance = initialBalance;
    }

    public synchronized void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawn $" + amount + " from account " + accountNumber);
        } else {
            System.out.println("Withdrawal failed for account " + accountNumber);
        }
    }

    public synchronized void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited $" + amount + " into account " + accountNumber);
        } else {
            System.out.println("Deposit failed for account " + accountNumber);
        }
    }

    public synchronized double getBalance() {
        return balance;
    }
}
class AccountManager {
    private static volatile AccountManager instance;
    private Map<Integer, Account> accounts;

    private AccountManager() {
        accounts = new HashMap<>();
    }

    public static AccountManager getInstance() {
        if (instance == null) {
            synchronized (AccountManager.class) {
                if (instance == null) {
                    instance = new AccountManager();
                }
            }
        }
        return instance;
    }

    public synchronized void createAccount(int accountNumber, String accountHolder, double initialBalance) {
        if (!accounts.containsKey(accountNumber)) {
            Account account = new Account(accountNumber, accountHolder, initialBalance);
            accounts.put(accountNumber, account);
            System.out.println("Account " + accountNumber + " created.");
        } else {
            System.out.println("Account " + accountNumber + " already exists.");
        }
    }

    public synchronized void performOperation(int accountNumber, double amount, String operation) {
        if (accounts.containsKey(accountNumber)) {
            Account account = accounts.get(accountNumber);
            if (operation.equalsIgnoreCase("withdraw")) {
                account.withdraw(amount);
            } else if (operation.equalsIgnoreCase("deposit")) {
                account.deposit(amount);
            } else if (operation.equalsIgnoreCase("getBalance")) {
                double balance = account.getBalance();
                System.out.println("Balance of account " + accountNumber + ": $" + balance);
            } else {
                System.out.println("Invalid operation: " + operation);
            }
        } else {
            System.out.println("Account " + accountNumber + " does not exist.");
        }
    }
}
public class MainAccount {
    public static void main(String[] args) {
        AccountManager accountManager = AccountManager.getInstance();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Menu:");
            System.out.println("1. Create Account");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Get Balance");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();

            if (choice == 1) {
                System.out.print("Enter account number: ");
                int accountNumber = scanner.nextInt();
                scanner.nextLine();  // Consume newline
                System.out.print("Enter account holder name: ");
                String accountHolder = scanner.nextLine();
                System.out.print("Enter initial balance: ");
                double initialBalance = scanner.nextDouble();
                accountManager.createAccount(accountNumber, accountHolder, initialBalance);
            } else if (choice == 2 || choice == 3 || choice == 4) {
                System.out.print("Enter account number: ");
                int accountNumber = scanner.nextInt();
                System.out.print("Enter amount: ");
                double amount = scanner.nextDouble();
                String operation = (choice == 2) ? "withdraw" : (choice == 3) ? "deposit" : "getBalance";
                accountManager.performOperation(accountNumber, amount, operation);
            } else if (choice == 5) {
                break;
            } else {
                System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
